# Cloud Build configuration for it-bot-service deployment to Cloud Run
# Deploys automatically to both staging and production
steps:
  # Step 1: Run tests (excluding integration tests that require Docker)
  - name: "golang:1.21"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        go mod download
        # Run unit tests only (exclude integration and e2e tests)
        go test ./internal/handlers ./internal/services ./pkg/... -v
        echo "Unit tests completed successfully"
    env:
      - "CGO_ENABLED=0"
      - "GOOS=linux"
    id: "test"

  # Step 2: Build Docker image
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "build"
      - "-t"
      - "gcr.io/${PROJECT_ID}/it-bot-service:${SHORT_SHA}"
      - "-t"
      - "gcr.io/${PROJECT_ID}/it-bot-service:latest"
      - "."
    id: "build"
    waitFor: ["test"]

  # Step 3: Push image to GCR
  - name: "gcr.io/cloud-builders/docker"
    args:
      - "push"
      - "--all-tags"
      - "gcr.io/${PROJECT_ID}/it-bot-service"
    id: "push"
    waitFor: ["build"]

  # Step 4: Deploy to Staging
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "gcloud"
    args:
      - "run"
      - "deploy"
      - "it-bot-service-staging"
      - "--image"
      - "gcr.io/${PROJECT_ID}/it-bot-service:${SHORT_SHA}"
      - "--region"
      - "us-east1"
      - "--platform"
      - "managed"
      - "--allow-unauthenticated"
      - "--port"
      - "8080"
      - "--memory"
      - "1Gi"
      - "--cpu"
      - "1"
      - "--min-instances"
      - "0"
      - "--max-instances"
      - "5"
      - "--concurrency"
      - "80"
      - "--timeout"
      - "900"
      - "--set-env-vars"
      - "ENVIRONMENT=staging,LOG_LEVEL=debug"
      - "--labels"
      - "service=it-bot-service,environment=staging,version=${SHORT_SHA}"
    id: "deploy-staging"
    waitFor: ["push"]

  # Step 5: Deploy to Production (main service)
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "gcloud"
    args:
      - "run"
      - "deploy"
      - "it-bot-service"
      - "--image"
      - "gcr.io/${PROJECT_ID}/it-bot-service:${SHORT_SHA}"
      - "--region"
      - "us-east1"
      - "--platform"
      - "managed"
      - "--allow-unauthenticated"
      - "--port"
      - "8080"
      - "--memory"
      - "2Gi"
      - "--cpu"
      - "2"
      - "--min-instances"
      - "1"
      - "--max-instances"
      - "20"
      - "--concurrency"
      - "100"
      - "--timeout"
      - "900"
      - "--set-env-vars"
      - "ENVIRONMENT=production,LOG_LEVEL=warn"
      - "--labels"
      - "service=it-bot-service,environment=production,version=${SHORT_SHA}"
    id: "deploy-production"
    waitFor: ["deploy-staging"]

  # Step 6: Update production traffic
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "Updating production traffic to latest revision..."
        gcloud run services update-traffic it-bot-service \
          --to-latest \
          --region us-east1
        echo "Production traffic updated successfully!"
    id: "update-production-traffic"
    waitFor: ["deploy-production"]

  # Step 7: Show deployment info for both services
  - name: "gcr.io/google.com/cloudsdktool/cloud-sdk"
    entrypoint: "bash"
    args:
      - "-c"
      - |
        echo "ðŸŽ‰ Deployment completed successfully!"
        echo "=================================="
        
        # Staging service info
        echo "ðŸ“‹ STAGING SERVICE:"
        echo "Service: it-bot-service-staging"
        echo "Region: us-east1"
        STAGING_URL=$$(gcloud run services describe it-bot-service-staging --region=us-east1 --format='value(status.url)' || echo "Service not ready yet")
        echo "URL: $$STAGING_URL"
        echo "Test: curl $$STAGING_URL/api/v1/health"
        echo ""
        
        # Production service info
        echo "ðŸš€ PRODUCTION SERVICE:"
        echo "Service: it-bot-service"
        echo "Region: us-east1"
        PROD_URL=$$(gcloud run services describe it-bot-service --region=us-east1 --format='value(status.url)' || echo "Service not ready yet")
        echo "URL: $$PROD_URL"
        echo "Test: curl $$PROD_URL/api/v1/health"
        echo ""
        
        echo "âœ… Both services deployed successfully!"
        echo "ðŸ“Š Summary:"
        echo "- Staging: it-bot-service-staging (1 CPU, 1Gi RAM, 0-5 instances)"
        echo "- Production: it-bot-service (2 CPU, 2Gi RAM, 1-20 instances)"
    id: "show-info"
    waitFor: ["update-production-traffic"]

# Build options
options:
  # Use higher CPU for faster builds
  # machineType: "E2_HIGHCPU_8"
  # Enable Docker layer caching
  env:
    - "DOCKER_BUILDKIT=1"
  # Configure logging behavior
  logging: "CLOUD_LOGGING_ONLY"

# Build timeout (at root level)
timeout: "1200s"

# Build artifacts
artifacts:
  images:
    - "gcr.io/${PROJECT_ID}/it-bot-service:${SHORT_SHA}"
    - "gcr.io/${PROJECT_ID}/it-bot-service:latest"

# Build tags for organization
tags:
  - "it-bot-service"
  - "dual-deployment"
  - "cloud-run"